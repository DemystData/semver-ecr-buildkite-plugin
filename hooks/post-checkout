#!/bin/bash

# Enable strict error handling
set -euo pipefail

INITIAL_VERSION="${BUILDKITE_PLUGIN_SEMVER_ECR_INITIAL_VERSION:-v1.0.0}"

# Function to validate initial parameters
validate_parameters() {
  # Check and validate optional parameters

  if [[ ! "$INITIAL_VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    echo "Error: Invalid initial version format. Expected format: vX.Y.Z (e.g., v1.0.0)"
    exit 1
  fi

  if [[ -z "${BUILDKITE_PLUGIN_SEMVER_ECR_REPOSITORY:-}" ]]; then
    echo "Error: Repository not specified."
    exit 1
  fi
  echo "Using Repository: ${BUILDKITE_PLUGIN_SEMVER_ECR_REPOSITORY}"

  if [[ -z "${BUILDKITE_PLUGIN_SEMVER_ECR_REGION:-}" ]]; then
    echo "Error: Region not specified."
    exit 1
  fi
  echo "Region: ${BUILDKITE_PLUGIN_SEMVER_ECR_REGION}"

  if [[ -z "${BUILDKITE_PLUGIN_SEMVER_ECR_ACCOUNT:-}" ]]; then
    echo "Error: Account not specified."
    exit 1
  fi
  echo "Account ID: ${BUILDKITE_PLUGIN_SEMVER_ECR_ACCOUNT}"
}

# Call the parameter validation function
validate_parameters

# Use the provided version branch or default to "main"
VERSION_BRANCH="${BUILDKITE_PLUGIN_SEMVER_ECR_VERSION_BRANCH:-main}"

# Execute only if on the version branch
if [ "$BUILDKITE_BRANCH" == "$VERSION_BRANCH" ]; then

  # Extract the latest commit message
  commit_message=$(git log -1 --pretty=%s)

  if echo "$commit_message" | grep -qE "^(feat|fix|major|patch):"; then
    # Extract the value before the colon
    VERSION_BUMP=$(echo "$commit_message" | sed -n 's/^\([^:]*\):.*/\1/p')
    echo "Valid prefix: $VERSION_BUMP"

  else
    echo "Commit message does not match any expected patterns"
    exit 1
  fi

  echo "Version bump type identified: $VERSION_BUMP"

  # Fetch the latest version tag from ECR
  LATEST_TAG=$(aws ecr describe-images \
      --repository-name "${BUILDKITE_PLUGIN_SEMVER_ECR_REPOSITORY}" \
      --region "${BUILDKITE_PLUGIN_SEMVER_ECR_REGION}" \
      --registry-id "${BUILDKITE_PLUGIN_SEMVER_ECR_ACCOUNT}" \
      --query "sort_by(imageDetails[?imageTags[?starts_with(@, \`v\`)]], &imagePushedAt)[-1].imageTags[?starts_with(@, \`v\`)] | [-1]" \
      --output text)
    
  echo "Latest version tag found: $LATEST_TAG"

  # Convert LATEST_TAG to lowercase (compatible with bash and zsh)
  LATEST_TAG_LOWER=$(echo "$LATEST_TAG" | tr '[:upper:]' '[:lower:]')

  if [ -z "$LATEST_TAG" ] || [ "$LATEST_TAG" = "None" ] || [ "$LATEST_TAG_LOWER" = "null" ] || [ "$LATEST_TAG_LOWER" = "none" ]; then
    echo "No version tags found; initializing with ${INITIAL_VERSION}"
    VERSION_BUMP="initial"
  fi

  if [[ "$VERSION_BUMP" != "initial" ]]; then
    # Strip the 'v' prefix
    LATEST_TAG="${LATEST_TAG#v}"

    echo "Latest version tag after filter: $LATEST_TAG"

    MAJOR=$(echo "$LATEST_TAG" | cut -d. -f1)
    MINOR=$(echo "$LATEST_TAG" | cut -d. -f2)
    PATCH=$(echo "$LATEST_TAG" | cut -d. -f3)
  fi

  # Increment version based on the identified bump type
  case "$VERSION_BUMP" in
    major)
      MAJOR=$((MAJOR + 1))
      MINOR=0
      PATCH=0
      ;;
    feat)
      MINOR=$((MINOR + 1))
      PATCH=0
      ;;
    fix | patch)
      PATCH=$((PATCH + 1))
      ;;
    initial)
      echo "Initial version bump type identified. Initializing with ${INITIAL_VERSION}"
      ;;
    *)
      echo "Unknown version bump type: $VERSION_BUMP. Defaulting to patch."
      PATCH=$((PATCH + 1))
      ;;
  esac

  if [[ "$VERSION_BUMP" != "initial" ]]; then
    # Construct the next version tag
    NEXT_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
  else
    NEXT_VERSION="${INITIAL_VERSION}"
  fi

  echo "Next version for branch: $NEXT_VERSION"
  
else
  # For non-main branches, use the build number as the version tag
  NEXT_VERSION="${BUILDKITE_BUILD_NUMBER}"
  echo "Non-${VERSION_BRANCH} branch version set to build number: $NEXT_VERSION"
fi

# Export the next version for further use
export NEXT_VERSION_TAG=${NEXT_VERSION}
echo "Exported NEXT_VERSION_TAG:$NEXT_VERSION_TAG"